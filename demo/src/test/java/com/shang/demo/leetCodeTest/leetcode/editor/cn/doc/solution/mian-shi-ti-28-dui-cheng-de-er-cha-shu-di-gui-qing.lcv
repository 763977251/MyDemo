#### 解题思路：

- **对称二叉树定义：** 对于树中 **任意两个对称节点** $L$ 和 $R$ ，一定有：
  - $L.val = R.val$ ：即此两对称节点值相等。
  - $L.left.val = R.right.val$ ：即 $L$ 的 左子节点 和 $R$ 的 右子节点 对称；
  - $L.right.val = R.left.val$ ：即 $L$ 的 右子节点 和 $R$ 的 左子节点 对称。
- 根据以上规律，考虑从顶至底递归，判断每对节点是否对称，从而判断树是否为对称二叉树。

![Picture1.png](https://pic.leetcode-cn.com/ebf894b723530a89cc9a1fe099f36c57c584d4987b080f625b33e228c0a02bec-Picture1.png)

##### 算法流程：

**`isSymmetric(root)` ：**

- **特例处理：** 若根节点 `root` 为空，则直接返回 $true$ 。
- **返回值：** 即 `recur(root.left, root.right)` ;

**`recur(L, R)` ：**

- **终止条件：**
  - 当 $L$ 和 $R$ 同时越过叶节点： 此树从顶至底的节点都对称，因此返回 $true$ ；
  - 当 $L$ 或 $R$ 中只有一个越过叶节点： 此树不对称，因此返回 $false$ ；
  - 当节点 $L$ 值 $\ne$ 节点 $R$ 值： 此树不对称，因此返回 $false$ ；
- **递推工作：**
  - 判断两节点 $L.left$ 和 $R.right$ 是否对称，即 `recur(L.left, R.right)` ；
  - 判断两节点 $L.right$ 和 $R.left$ 是否对称，即 `recur(L.right, R.left)` ；
- **返回值：** 两对节点都对称时，才是对称树，因此用与逻辑符 `&&` 连接。

<![Picture2.png](https://pic.leetcode-cn.com/3450dfa149978f94ae18fb90dca6cd6b5b960281791cf0a4447640f5bad917b9-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/571dea02369eecbb6cd906700b7561975da6aeec661afc2cb58fee3da9029dac-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/cb5572c3fc4fb4cd9e8d92a09d711aac8fb0ca3aeee242564d4a40ab0a6627cb-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/e7d8bfa70353eadf167268e532a9bf367e03a081b7000784b64b62a14104f70f-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/d96a12826e829771af3b96d9ab380b0d44b900ec9f24179bc004e4f3d6028e85-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/3f4c71ffa15875a6c8eea80b3e52abf7cfbfb63ec7139e242c5dc4b9f4c0155c-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/993cd0f9c81e21429badb9e831740d7d248f697b9c37b0bb5a2afd4274a26a81-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/afc54ed41a77e9587672b328cf96428b25f866f87634c10df4a64246ec540aa6-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/5b1ecc845d49b5533bc618a2d629e4b0e03f14e80a04394dc0c0ee67bc253fe3-Picture10.png),![Picture11.png](https://pic.leetcode-cn.com/e87fa457431af2a8408d8822fd7f8b9e70494af3c5e4e43f01e24ab25f838b49-Picture11.png)>

**复杂度分析：**

- **时间复杂度 $O(N)$ ：** 其中 $N$ 为二叉树的节点数量，每次执行 `recur()` 可以判断一对节点是否对称，因此最多调用 $N/2$  次 `recur()` 方法。
- **空间复杂度 $O(N)$ ：** 最差情况下（见下图），二叉树退化为链表，系统使用 $O(N)$ 大小的栈空间。

![Picture12.png](https://pic.leetcode-cn.com/88916808515487aac3ca24f9c55cbbdf6514f012eea04ec46cc2cc26acf9c4eb-Picture12.png)

<br> </br>

* []

```python
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        def recur(L, R):
            if not L and not R: return True
            if not L or not R or L.val != R.val: return False
            return recur(L.left, R.right) and recur(L.right, R.left)

        return recur(root.left, root.right) if root else True
```

* []

```java
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return root == null ? true : recur(root.left, root.right);
    }
    boolean recur(TreeNode L, TreeNode R) {
        if(L == null && R == null) return true;
        if(L == null || R == null || L.val != R.val) return false;
        return recur(L.left, R.right) && recur(L.right, R.left);
    }
}
```

