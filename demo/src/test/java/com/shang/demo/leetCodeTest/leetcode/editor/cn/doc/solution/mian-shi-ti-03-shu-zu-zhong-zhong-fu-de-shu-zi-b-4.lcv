### 方法一：遍历数组

由于只需要找出数组中任意一个重复的数字，因此遍历数组，遇到重复的数字即返回。为了判断一个数字是否重复遇到，使用集合存储已经遇到的数字，如果遇到的一个数字已经在集合中，则当前的数字是重复数字。

* 初始化集合为空集合，重复的数字 `repeat = -1`
* 遍历数组中的每个元素：
  * 将该元素加入集合中，判断是否添加成功
    * 如果添加失败，说明该元素已经在集合中，因此该元素是重复元素，将该元素的值赋给 `repeat`，并结束遍历
* 返回 `repeat`

* []

```Java
class Solution {
    public int findRepeatNumber(int[] nums) {
        Set<Integer> set = new HashSet<Integer>();
        int repeat = -1;
        for (int num : nums) {
            if (!set.add(num)) {
                repeat = num;
                break;
            }
        }
        return repeat;
    }
}
```

**复杂性分析**

* 时间复杂度：$O(n)$。
  * 遍历数组一遍。使用哈希集合（`HashSet`），添加元素的时间复杂度为 $O(1)$，故总的时间复杂度是 $O(n)$。
* 空间复杂度：$O(n)$。不重复的每个元素都可能存入集合，因此占用 $O(n)$ 额外空间。

