#### 解题思路：

| 常见解法 | 时间复杂度 | 空间复杂度 |
| -------- | ---------- | ---------- |
| 暴力搜索 | $O(N^2)$   | $O(1)$     |
| 分治思想 | $O(NlogN)$ | $O(logN)$  |
| 动态规划 | $O(N)$     | $O(1)$     |

动态规划是本题的最优解法，以下按照标准流程解题。

##### 动态规划解析：

- **状态定义：** 设动态规划列表 $dp$ ，$dp[i]$ 代表以元素 $nums[i]$ 为结尾的连续子数组最大和。

  - 为何定义最大和 $dp[i]$ 中必须包含元素 $nums[i]$ ：保证 $dp[i]$ 递推到 $dp[i+1]$ 的正确性；如果不包含 $nums[i]$ ，递推时则不满足题目的 **连续子数组** 要求。
- **转移方程：** 若 $dp[i-1] \leq 0$ ，说明 $dp[i - 1]$ 对 $dp[i]$ 产生负贡献，即 $dp[i-1] + nums[i]$ 还不如 $nums[i]$ 本身大。

  - 当 $dp[i - 1] > 0$ 时：执行 $dp[i] = dp[i-1] + nums[i]$ ；
  - 当 $dp[i - 1] \leq 0$ 时：执行 $dp[i] = nums[i]$ ；
- **初始状态：** $dp[0] = nums[0]$，即以 $nums[0]$ 结尾的连续子数组最大和为 $nums[0]$ 。

- **返回值：** 返回 $dp$ 列表中的最大值，代表全局最大值。

![Picture1.png](https://pic.leetcode-cn.com/8fec91e89a69d8695be2974de14b74905fcd60393921492bbe0338b0a628fd9a-Picture1.png)

##### 空间复杂度降低：

- 由于 $dp[i]$ 只与 $dp[i-1]$ 和 $nums[i]$ 有关系，因此可以将原数组 $nums$ 用作 $dp$ 列表，即直接在 $nums$ 上修改即可。
- 由于省去 $dp$ 列表使用的额外空间，因此空间复杂度从 $O(N)$ 降至 $O(1)$ 。

**复杂度分析：**

- **时间复杂度 $O(N)$ ：** 线性遍历数组 $nums$ 即可获得结果，使用 $O(N)$ 时间。
- **空间复杂度 $O(1)$ ：** 使用常数大小的额外空间。

<![Picture2.png](https://pic.leetcode-cn.com/ea600eec9a9b413dfbf41ead44859ec77b4473131b5103e37c87528e5d6d1b79-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/7eab2e48f63d9668b25d5c53a5fb32f069b10fcff518e8d2f822872ea6bfe0b7-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/3448a2dc8c3795265fad5dd555f347c6852858677de2a911ee250aabd6cd70cb-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/d52adac54284cd1aaf893d15be870923166472763da798c0a118258264bff5aa-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/521ede63f1346e2cf60db0002d7f03d34726c998ba5f609e7eb0de01b2789b3f-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/53a1e1f33efd1367635f7237a5ece0d62c727c3ba565167d2ecb19e04afaa57a-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/8dac6fb2c89a7aa3ccbdf89782a54a8b5df7cab0550e6b5853390a48d3edc946-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/1c08d6263238b970c9780b2e3ee9d9f8ab64ea1b977dbb4a0103ba0a94bcd346-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/b37120c2a46faef1743a63b5924463526b9b4c2b934ac3b8b36e09bc286817cc-Picture10.png),![Picture11.png](https://pic.leetcode-cn.com/c502664e32644efb8ffd25e6b118a9c754803beddfd09ca35fcc22c50d7c8d53-Picture11.png)>

##### 代码：

* []

```python
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        for i in range(1, len(nums)):
            nums[i] += max(nums[i - 1], 0)
        return max(nums)
```

* []

```java
class Solution {
    public int maxSubArray(int[] nums) {
        int res = nums[0];
        for(int i = 1; i < nums.length; i++) {
            nums[i] += Math.max(nums[i - 1], 0);
            res = Math.max(res, nums[i]);
        }
        return res;
    }
}
```

