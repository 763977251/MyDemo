#### 解题思路：

根据题意，可按照下图的思路，总结出 “递推公式” （即转移方程）。
因此，此题可用动态规划解决，以下按照流程解题。

![Picture1.png](https://pic.leetcode-cn.com/e231fde16304948251633cfc65d04396f117239ea2d13896b1d2678de9067b42-Picture1.png)

##### 动态规划解析：

> 记数字 $num$ 第 $i$ 位数字为 $x_i$ ，数字 $num$ 的位数为 $n$ ；
> 例如： $num = 12258$ 的 $n = 5$ , $x_1 = 1$ 。

- **状态定义：** 设动态规划列表 $dp$ ，$dp[i]$ 代表以 $x_i$ 为结尾的数字的翻译方案数量。

- **转移方程：** 若 $x_i$ 和 $x_{i-1}$ 组成的两位数字可以被翻译，则 $dp[i] = dp[i - 1] + dp[i - 2]$ ；否则 $dp[i] = dp[i - 1]$ 。
  - 可被翻译的两位数区间：当 $x_{i-1} = 0$ 时，组成的两位数是无法被翻译的（例如 $00, 01, 02, \cdots$ ），因此区间为 $[10, 25]$ 。

$$
dp[i] =
\begin{cases}
dp[i - 1] + dp[i - 2] & {, 10 x_{i-1} + x_i \in [10,25]} \\
dp[i - 1] & {, 10 x_{i-1} + x_i \in [0, 10) \cup (25, 99]}
\end{cases}
$$

- **初始状态：** $dp[0] = dp[1] = 1$ ，即 “无数字” 和 “第 $1$ 位数字” 的翻译方法数量均为 $1$ ；

- **返回值：** $dp[n]$ ，即此数字的翻译方案数量。

> **Q：** 无数字情况 $dp[0] = 1$ 从何而来？
> **A：** 当 $num$ 第 $1, 2$ 位的组成的数字 $\in [10,25]$ 时，显然应有 $2$ 种翻译方法，即 $dp[2] = dp[1] + dp[0] = 2$ ，而显然 $dp[1] = 1$ ，因此推出 $dp[0] = 1$ 。

#### 方法一：字符串遍历

- 为方便获取数字的各位 $x_i$ ，考虑先将数字 $num$ 转化为字符串 $s$ ，通过遍历 $s$ 实现动态规划。
- 通过字符串切片 $s[i - 2:i]$ 获取数字组合 $10 x_{i-1} + x_i$ ，通过对比字符串 ASCII 码判断字符串对应的数字区间。
- **空间使用优化：** 由于 $dp[i]$ 只与 $dp[i - 1]$ 有关，因此可使用两个变量 $a, b$ 分别记录 $dp[i], dp[i - 1]$  ，两变量交替前进即可。此方法可省去 $dp$ 列表使用的 $O(N)$ 的额外空间。

##### 复杂度分析：

- **时间复杂度 $O(N)$ ：** $N$ 为字符串 $s$ 的长度（即数字 $num$ 的位数 $\log(num)$ ），其决定了循环次数。
- **空间复杂度 $O(N)$ ：** 字符串 $s$ 使用 $O(N)$ 大小的额外空间。

<![Picture2.png](https://pic.leetcode-cn.com/f61ef2e376f0630ac9cf7cbd50701e64f73c9eb780bd942bd0697b92e3e13483-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/ad781beae643580cd3d52cca8679799deb3f7507d899881103bbe21a3f38907c-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/65d0dd59b5c6d31908f9f3df9a5f4282c94b58823a85339662fde39f9e649bd9-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/f1f66ffc93d25976f0b599135c7bf2efcf496cb05f370b87fad55660e16ff7c1-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/14319cb014105648e9f360c7916c7d4985648992b337c3308b5c6088f3da4dde-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/4fc0ea440e9c493e9a82fb8313489edfd0b9612c8f33ac6178ca68d241647149-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/ebfd2d2b5a94ec34aaf7bdbbb72db5b8398ed6eb17c9842564a0d32179d90f5e-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/c13a47704f2f533c98a6c4175cacb858d54fd193fb9fec0f39e5f7b8d7735e4c-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/46d1fbb9a5943ddc56a48fa52d90447f4cf19467d67e6a44ae9b04dbc9804841-Picture10.png),![Picture11.png](https://pic.leetcode-cn.com/931cfb6eebc6b28ce255a4519a7cfa4ceee112ead044f4fc61f1eda46f13b9d7-Picture11.png)>

##### 代码：

由于 Python 语言特性，可不使用临时变量 $tmp$ 和 $c$ ，若阅读不畅可转至第三栏代码。

* []

```java
class Solution {
    public int translateNum(int num) {
        String s = String.valueOf(num);
        int a = 1, b = 1;
        for(int i = 2; i <= s.length(); i++) {
            String tmp = s.substring(i - 2, i);
            int c = tmp.compareTo("10") >= 0 && tmp.compareTo("25") <= 0 ? a + b : a;
            b = a;
            a = c;
        }
        return a;
    }
}
```

* []

```python
class Solution:
    def translateNum(self, num: int) -> int:
        s = str(num)
        a = b = 1
        for i in range(2, len(s) + 1):
            a, b = (a + b if "10" <= s[i - 2:i] <= "25" else a), a
        return a
```

* []

```python
class Solution:
    def translateNum(self, num: int) -> int:
        s = str(num)
        a = b = 1
        for i in range(2, len(s) + 1):
            tmp = s[i - 2:i]
            c = a + b if "10" <= tmp <= "25" else a
            b = a
            a = c
        return a
```

此题的动态规划计算是 **对称的** ，即 **从左向右** 遍历（从第 $dp[2]$ 计算至 $dp[n]$ ）和 **从右向左** 遍历（从第 $dp[n - 2]$ 计算至 $dp[0]$ ）所得方案数一致。从右向左遍历的代码如下所示。

* []

```java
class Solution {
    public int translateNum(int num) {
        String s = String.valueOf(num);
        int a = 1, b = 1;
        for(int i = s.length() - 2; i > -1; i--) {
            String tmp = s.substring(i, i + 2);
            int c = tmp.compareTo("10") >= 0 && tmp.compareTo("25") <= 0 ? a + b : a;
            b = a;
            a = c;
        }
        return a;
    }
}
```

* []

```python
class Solution:
    def translateNum(self, num: int) -> int:
        s = str(num)
        a = b = 1
        for i in range(len(s) - 2, -1, -1):
            a, b = (a + b if "10" <= s[i:i + 2] <= "25" else a), a
        return a
```

#### 方法二：数字求余

- 上述方法虽然已经节省了 $dp$ 列表的空间占用，但字符串 $s$ 仍使用了 $O(N)$ 大小的额外空间。

##### 空间复杂度优化：

- 利用求余运算 $num \% 10$  和求整运算 $num // 10$ ，可获取数字 $num$ 的各位数字（获取顺序为个位、十位、百位…）。
- 因此，可通过 **求余** 和 **求整** 运算实现 **从右向左** 的遍历计算。而根据上述动态规划 “对称性” ，可知从右向左的计算是正确的。
- 自此，字符串 $s$ 的空间占用也被省去，空间复杂度从 $O(N)$ 降至 $O(1)$ 。

##### 复杂度分析：

- **时间复杂度 $O(N)$ ：** $N$ 为字符串 $s$ 的长度（即数字 $num$ 的位数 $\log(num)$ ），其决定了循环次数。
- **空间复杂度 $O(1)$ ：** 几个变量使用常数大小的额外空间。

<![Picture12.png](https://pic.leetcode-cn.com/da5ae549c4234a42615bb6ee3a10422343a71c1b2aa33030eeaa71ca2279ba33-Picture12.png),![Picture13.png](https://pic.leetcode-cn.com/c2ac9126580a30366f88e1b27c3052cc4fee7afcebb67e07b6aeaf8c0d4d59ae-Picture13.png),![Picture14.png](https://pic.leetcode-cn.com/b37c9b4354496605716bdc50875e2138394a901fdb33885dae9de08a96570967-Picture14.png),![Picture15.png](https://pic.leetcode-cn.com/73a0e471ae489420586ff77a5267f71617eb3fc2dd18c7443ebbf1de248252db-Picture15.png),![Picture16.png](https://pic.leetcode-cn.com/9621f79fa2954c0ed34f0b278f66f54979af80389fb59c58305efd9848dda783-Picture16.png),![Picture17.png](https://pic.leetcode-cn.com/40e0fc171c3a6950bf45c904987a2df52002683c5e35b48461cb2d71c7e7ed8b-Picture17.png),![Picture18.png](https://pic.leetcode-cn.com/be7380e708c6877b4aa78364a0e3eb1e20fb3f540b8bf0bf52a5e63654c51117-Picture18.png),![Picture19.png](https://pic.leetcode-cn.com/a955c2105d4205b95a0d82453b3ea16cb7d111930fa1d85813a20ff9e80f0317-Picture19.png),![Picture20.png](https://pic.leetcode-cn.com/46211327a9433d5c462ba93b98060b30e34be677d8ced78a6eb354eb265d42c2-Picture20.png),![Picture21.png](https://pic.leetcode-cn.com/5788b3fc0278b6439f6ff38f1e743af08f471635920c3125706bca16a9287538-Picture21.png),![Picture22.png](https://pic.leetcode-cn.com/dd93aaf57d1189bfe33279b5dbf00e34a07ee66e9eb7afdce130170133b0657c-Picture22.png),![Picture23.png](https://pic.leetcode-cn.com/1967146d2f685356c5e6bba36e1da5226879c928c9b470f9cdbfef75f6a657ff-Picture23.png),![Picture24.png](https://pic.leetcode-cn.com/dba68cc3968b956fff2812586a12d8efe1cc728084f50abd74e215a0d6c730ec-Picture24.png),![Picture25.png](https://pic.leetcode-cn.com/3cbf3b45f977cc15bc1435c13d36556a8e11e44e8e96bc60f43578fbe511cac9-Picture25.png)>

##### 代码：

由于 Python 语言特性，可不使用临时变量 $tmp$ 和 $c$ ，若阅读不畅可转至第三栏代码。

* []

```java
class Solution {
    public int translateNum(int num) {
        int a = 1, b = 1, x, y = num % 10;
        while(num != 0) {
            num /= 10;
            x = num % 10;
            int tmp = 10 * x + y;
            int c = (tmp >= 10 && tmp <= 25) ? a + b : a;
            b = a;
            a = c;
            y = x;
        }
        return a;
    }
}
```

* []

```python
class Solution:
    def translateNum(self, num: int) -> int:
        a = b = 1
        y = num % 10
        while num != 0:
            num //= 10
            x = num % 10
            a, b = (a + b if 10 <= 10 * x + y <= 25 else a), a
            y = x
        return a
```

* []

```python
class Solution:
    def translateNum(self, num: int) -> int:
        a = b = 1
        y = num % 10
        while num != 0:
            num //= 10
            x = num % 10
            tmp = 10 * x + y
            c = a + b if 10 <= tmp <= 25 else a
            a, b = c, a
            y = x
        return a
```

