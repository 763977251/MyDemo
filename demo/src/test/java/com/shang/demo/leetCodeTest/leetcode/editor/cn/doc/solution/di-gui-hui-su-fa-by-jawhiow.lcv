### 思路

这是一道比较实际的题目，由于我们不知道具体 $n$ 为几，所以用回溯算法是比较合适的。

而题目中由于限定了顶部的四个代表了 $0-11$ 小时，底部的 $0-59$ 代表分钟。所以我们不用考虑进位的问题。所以当有超过这个限制的，我们需要进行剪枝，否则最后的结果就错了。

### 递归结构

$r(n)=r(n-1)+w$

$w$ 代表从 $nums$ 中选出一个数字。

### 递归边界

`if (n == step)`

### 递归参数

- $n$：亮灯数量
- $step$：递归层数
- $result$：单次结果
- $result_all$：最终结果

### 其他处理

- 分别计算小时和分钟，若超过 $0-11$ 和 $0-59$ ，则进行剪枝，所以需要写一个函数，判断当前合不合理
- 将所有灯组成 $nums$ =  $[1, 2, 4, 8, 1, 2, 4, 8, 16, 32]$ = $[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]$
- 写一个函数，将 $nums$ 处理成正确的时间

### 代码

* [-python]

```python
class Solution(object):
    def __init__(self):
        self.result_all = None
        self.nums = [1, 2, 4, 8, 1, 2, 4, 8, 16, 32]
        self.visited = None
    
    def readBinaryWatch(self, num):
        """
        :type num: int
        :rtype: List[str]
        """
        self.result_all = []
        self.visited = [0 for _ in range(len(self.nums))]
        self.dfs(num, 0, 0)
        return self.result_all
    
    def dfs(self, num, step, start):
        if step == num:
            self.result_all.append(self.handle_date(self.visited))
            return
        for i in range(start, len(self.nums)):
            self.visited[i] = 1
            if not self.calc_sum(self.visited):
                self.visited[i] = 0
                continue
            self.dfs(num, step + 1, i + 1)
            self.visited[i] = 0
        return
            
    def calc_sum(self, visited):
        sum_h = 0
        sum_m = 0
        for i in range(len(visited)):
            if visited[i] == 0:
                continue
            if i < 4:
                sum_h += self.nums[i]
            else:
                sum_m += self.nums[i]
        return 0 <= sum_h <= 11 and 0 <= sum_m <= 59
    
    def handle_date(self, visited):
        sum_h = 0
        sum_m = 0
        for i in range(len(visited)):
            if visited[i] == 0:
                continue
            if i < 4:
                sum_h += self.nums[i]
            else:
                sum_m += self.nums[i]
        result = "" + str(sum_h) + ":"
        if sum_m < 10:
            result += "0" + str(sum_m)
        else:
            result += str(sum_m)
        return result
```

