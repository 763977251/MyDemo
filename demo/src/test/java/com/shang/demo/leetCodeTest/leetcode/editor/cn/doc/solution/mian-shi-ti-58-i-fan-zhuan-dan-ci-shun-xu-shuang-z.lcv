#### 方法一：双指针

##### 算法解析：

- 倒序遍历字符串 $s$ ，记录单词左右索引边界 $i$ , $j$ ；
- 每确定一个单词的边界，则将其添加至单词列表 $res$ ；
- 最终，将单词列表拼接为字符串，并返回即可。

##### 复杂度分析：

- **时间复杂度 $O(N)$ ：** 其中 $N$ 为字符串 $s$ 的长度，线性遍历字符串。
- **空间复杂度 $O(N)$ ：** 新建的 list(Python) 或 StringBuilder(Java) 中的字符串总长度 $\leq N$ ，占用 $O(N)$ 大小的额外空间。

<![Picture2.png](https://pic.leetcode-cn.com/b381201214fe7ffa97d8e23575fc26cc3914be6941219cafb90124d6bcca173a-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/2b3fe2e60404c47a53ae225438dce5f4e213ad981bcbc0b06e397ea8340045e5-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/ba89778b47a981029406ba7efb84ef955cb3064b9f3113ffaa9e586e33d22955-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/b0ad3cf17cb1c7ee3b99a851990c74445ab8468f95b86f682bec241d699db485-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/50b610a0cb0af5e8082b9675eac50189c2896add750e99d45643f6e275491efb-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/5ea9e06ec4bbe3b790076b2012ddf99b2833e44985e743e23b85bbb8c65d0e65-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/16a4dd165b9fd5e2f031c91a593bc83968765244a17312eb7fe7fc4a9a04d2a6-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/acdf041c8ee64e86159e0ba176cf14700ca26b3c6a90503a076e947e2e10d096-Picture9.png),![Picture10.png](https://pic.leetcode-cn.com/93a33590b28015e24ed043e313147dce71d4e74a7d07f05f45bc1d299da7ef3b-Picture10.png),![Picture11.png](https://pic.leetcode-cn.com/5618744fa0c73fef97a919e3e80e7d18972f49bb879cdfb46fd065fc040c8e4b-Picture11.png),![Picture12.png](https://pic.leetcode-cn.com/67d9a4d475b8a5043b8b0e16704bebc6fe35fa74bdf08e77a3101fa2e8d76394-Picture12.png),![Picture13.png](https://pic.leetcode-cn.com/2923a078002c1dd35e885376759b6846ee853e944d2376e7cfc114f9fdc033a6-Picture13.png),![Picture14.png](https://pic.leetcode-cn.com/ddf0d988b81bc27d59ebad4e49c5ce683938688155fcde9a7f06abc749c659f4-Picture14.png),![Picture15.png](https://pic.leetcode-cn.com/49c6bc342d9dc87169f96c62269a92ffbd13b9bd5cef201932385a69a7e03ce9-Picture15.png),![Picture16.png](https://pic.leetcode-cn.com/b6b1182bd96b3d2a95472e4c28eea2579b1bcd703f43956011eccd50e39cdbcf-Picture16.png),![Picture17.png](https://pic.leetcode-cn.com/5c08bcf4f3fa451a66bf429c32da31fb4f485ab5297ae5173a4a1c7a4f42c843-Picture17.png),![Picture18.png](https://pic.leetcode-cn.com/a628e3eca6187523fc80b253868b06736c6d91b07dc330dc67314d04e328b9a8-Picture18.png),![Picture19.png](https://pic.leetcode-cn.com/73dee0b058713771cd9d369550b6a0cb9060817173f11462c29c2600b623ba5f-Picture19.png)>

##### 代码：

* []

```Python
class Solution:
    def reverseWords(self, s: str) -> str:
        s = s.strip() # 删除首尾空格
        i = j = len(s) - 1
        res = []
        while i >= 0:
            while i >= 0 and s[i] != ' ': i -= 1 # 搜索首个空格
            res.append(s[i + 1: j + 1]) # 添加单词
            while s[i] == ' ': i -= 1 # 跳过单词间空格
            j = i # j 指向下个单词的尾字符
        return ' '.join(res) # 拼接并返回
```

* []

```Java
class Solution {
    public String reverseWords(String s) {
        s = s.trim(); // 删除首尾空格
        int j = s.length() - 1, i = j;
        StringBuilder res = new StringBuilder();
        while(i >= 0) {
            while(i >= 0 && s.charAt(i) != ' ') i--; // 搜索首个空格
            res.append(s.substring(i + 1, j + 1) + " "); // 添加单词
            while(i >= 0 && s.charAt(i) == ' ') i--; // 跳过单词间空格
            j = i; // j 指向下个单词的尾字符
        }
        return res.toString().trim(); // 转化为字符串并返回
    }
}
```

#### 方法二：分割 + 倒序

利用 “字符串分割”、“列表倒序” 的内置函数 *（面试时不建议使用）* ，可简便地实现本题的字符串翻转要求。

##### 算法解析：

- **Python ：** 由于 $split()$ 方法将单词间的 “多个空格看作一个空格” （参考自 [split()和split(' ')的区别](https://www.cnblogs.com/python-coder/p/10073329.html) ），因此不会出现多余的 “空单词” 。因此，直接利用 $reverse()$ 方法翻转单词列表 $strs$ ，拼接为字符串并返回即可。

![Picture1.png](https://pic.leetcode-cn.com/8cf5ef2cf61bb805827b6f2d034cb638dbeca52518880af495cb3c76a94ecc6b-Picture1.png)

- **Java ：** 以空格为分割符完成字符串分割后，若两单词间有 $x > 1$ 个空格，则在单词列表 $strs$ 中，此两单词间会多出 $x - 1$ 个 “空单词” （即 `""` ）。解决方法：倒序遍历单词列表，并将单词逐个添加至 StringBuilder ，遇到空单词时跳过。

![Picture0.png](https://pic.leetcode-cn.com/9ef4a9ea565bf1c2d9209ca94881a77288f90f222476cfd44c418fa3f2d2d7c1-Picture0.png)

##### 复杂度分析：

- **时间复杂度 $O(N)$ ：** 总体为线性时间复杂度，各函数时间复杂度和参考资料链接如下。
  - [`split()` 方法：](https://softwareengineering.stackexchange.com/questions/331909/whats-the-complexity-of-javas-string-split-function) 为 $O(N)$ ；
  - [`trim()` 和 `strip()` 方法：](https://stackoverflow.com/questions/51110114/is-string-trim-faster-than-string-replace) 最差情况下（当字符串全为空格时），为 $O(N)$ ；
  - [`join()` 方法：](https://stackoverflow.com/questions/37133547/time-complexity-of-string-concatenation-in-python) 为 $O(N)$ ；
  - [`reverse()` 方法：](https://stackoverflow.com/questions/37606159/what-is-the-time-complexity-of-python-list-reverse) 为 $O(N)$ ；
- **空间复杂度 $O(N)$ ：** 单词列表 $strs$ 占用线性大小的额外空间。

##### 代码：

* []

```Python
class Solution:
    def reverseWords(self, s: str) -> str:
        s = s.strip() # 删除首尾空格
        strs = s.split() # 分割字符串
        strs.reverse() # 翻转单词列表
        return ' '.join(strs) # 拼接为字符串并返回
```

* []

```Java
class Solution {
    public String reverseWords(String s) {
        String[] strs = s.trim().split(" "); // 删除首尾空格，分割字符串
        StringBuilder res = new StringBuilder();
        for(int i = strs.length - 1; i >= 0; i--) { // 倒序遍历单词列表
            if(strs[i].equals("")) continue; // 遇到空单词则跳过
            res.append(strs[i] + " "); // 将单词拼接至 StringBuilder
        }
        return res.toString().trim(); // 转化为字符串，删除尾部空格，并返回
    }
}
```

Python 可一行实现：

* []

```Python
class Solution:
    def reverseWords(self, s: str) -> str:
        return ' '.join(s.strip().split()[::-1])
```

