先明确一点：

* 

```
例子:s="a",p="c*a",返回为true,
因此其实 "c*" 是放在一起看的，
c* 可以是无，或者是单个多个c。
而不是 * 可以是无或者是单个多个a。
```

首先定义状态：
dp[i][j] ：s前i个字符[0,i)是否能匹配p的前j个字符[0,j)。要明确一点，这里是左闭右开的，因此此时是在比较s[i-1]与p[i-1]。

确定状态方程之前先明确都会出现什么情况。首先就是s[i-1]与p[j-1]之间的关系，可能相等，可能不等。不等的情况下有三种情况：（1）p[j-1]为'*'，（2）p[j-1]为'.'（3）p[j-1]就是普通的一个字符。接下来对这些情况进行具体的解释。

# 完整思路

## 1.s[i-1]==p[j-1]

    dp[i][j] = dp[i-1][j-1];

## 2.s[i-1]!=p[j-1]

### 1)p[j-1]=='.'

'.'是万能字符，可以直接让'.'等于s[i]处的字符
dp[i][j] = dp[i-1][j-1];

### 2)p[j-1]=='*'

'*'可以匹配零个或多个前面的元素，而是否能取多个或1个字符要看j-2的字符是否和i-1的字符相同。因此首先要判断p[j-2]==s[i-1]

#### (1)p[j-2]!=s[i-1]

j-2的字符不等于i-1的字符，那就只能让*代表取0个字符。
dp[i][j] = dp[i][j-2] (相当于去掉p[j-1]和p[j-2])

#### (2)p[j-2]==s[i-1]||p[j-2]=='.'

可以让*代表0个字符或多个字符，如果p[j-2]为'.'就可以替换为s[i-1]的字符

##### '*'取0个字符

例子：s:aab,p:aabb*,虽然j-2和i-1相等，但是dp[i][j-2]已经匹配了，直接删去j-1和j-2即可（你来之前我们就已经是总冠军了）

    dp[i][j] = dp[i][j-2] (取0个字符)

##### '*'取1个字符

例子：s:aab,p:aab*

    dp[i][j] = dp[i][j-1] (取1个字符，相当于去掉p[j-1])

##### '*'取多个字符

例子：s：aabb,p：aab*,要判断的是s:aab和aab* 是否可以匹配，如果可以匹配的话，那么s后面再加上一个b也没关系，因为*可以变成多个b。

    dp[i][j] = dp[i-1][j] (取多个字符)

#### 3)else（j处就是个普通字符，dp[i][j]肯定不能匹配了,其实这里写不写都可以，只不过为了让大家看着思路清晰。）

    dp[i][j] = false;

# 注意

最终要确定三点。
1.本题必须初始化第一行。也就是dp[0][j]。判断条件为：

* 

```
//p[j-1]为*可以把j-2和j-1处的字符删去，只有[0,j-3]也为true才可以让dp[0,j-1]为true。
if(p.charAt(j-1)=='*'&&dp[0][j-2])
```

2.以理解角度两个都是空的字符串肯定互相匹配，以代码角度，当s="a",p="a"时，dp[1][1] = dp[0][0],因此必须dp[0][0]取true

* 

```
dp[0][0] = true;
```

3.字符串为空长度为0，只需要判断他们是否为空即可。

* 

```
/*
s和p可能为空。空的长度就是0，但是这些情况都已经判断过了，只需要判断是否为null即可
if(p.length()==0&&s.length()==0)
    return true;
 */
    if(s==null||p==null)
        return false;
```

# 写在最后（总结出现‘*’的情况）

这里最难理解的就是如果p[j-1]=='*'的情况，上述的描述是把整个情况完全描绘出来了，其实可以简略一些过程。
*的情况只有两种：
1.不论p[j-2]是否等于s[i-1]都可以删除掉j-1和j-2处字符：

    dp[i][j] = dp[i][j]||dp[i][j-2];

2.只有p[j-2]==s[i-1]或p[j-2]==‘.’才可以让*取1个或者多个字符：

    if(nowpLast==nows||nowpLast=='.')
        dp[i][j] = dp[i-1][j]||dp[i][j-1];

# 完整题解

* java

```java
class Solution {
    public boolean isMatch(String s, String p) {
       /*
       s和p可能为空。空的长度就是0，但是这些情况都已经判断过了，只需要判断是否为null即可
       if(p.length()==0&&s.length()==0)
            return true;
            */
        if(s==null||p==null)
            return false;
       int rows = s.length();
       int columns = p.length();
       boolean[][]dp = new boolean[rows+1][columns+1];
       //s和p两个都为空，肯定是可以匹配的，同时这里取true的原因是
       //当s=a，p=a，那么dp[1][1] = dp[0][0]。因此dp[0][0]必须为true。
       dp[0][0] = true;
        for(int j=1;j<=columns;j++)
        {   
            //p[j-1]为*可以把j-2和j-1处的字符删去，只有[0,j-3]都为true才可以
            //因此dp[j-2]也要为true，才可以说明前j个为true
            if(p.charAt(j-1)=='*'&&dp[0][j-2])
                dp[0][j] = true;
        }

        for(int i=1;i<=rows;i++)
        {
            for(int j=1;j<=columns;j++)
            {
                char nows = s.charAt(i-1);
                char nowp = p.charAt(j-1);
                if(nows==nowp)
                {
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    if(nowp=='.')
                        dp[i][j] = dp[i-1][j-1];
                    else if(nowp=='*')
                    {
                        //p需要能前移1个。（当前p指向的是j-1，前移1位就是j-2，因此为j>=2）
                        if(j>=2){
                            char nowpLast = p.charAt(j-2);
                            //只有p[j-2]==s[i-1]或p[j-2]==‘.’才可以让*取1个或者多个字符：
                            if(nowpLast==nows||nowpLast=='.')
                                dp[i][j] = dp[i-1][j]||dp[i][j-1];
                            //不论p[j-2]是否等于s[i-1]都可以删除掉j-1和j-2处字符：
                            dp[i][j] = dp[i][j]||dp[i][j-2];
                        }
                    }
                    else
                        dp[i][j] = false;
                }
            }
        }
        return dp[rows][columns];
    }
}
```

