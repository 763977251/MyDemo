### 解题思路

想到要用动态规划，但不知道怎么去用，分的情况太多了，没写出来
看了题解，以后分情况还是要从大类到小类细分

### 代码

* java

```java
class Solution {
    public boolean isMatch(String s, String p) {
        //即s是给定字符串，p是正则表达式，s和p可以完全一样，则匹配成功
        int n = s.length();
        int m = p.length();
        boolean[][] dp = new boolean[n + 1][m + 1];//dp数组，默认为false

        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                //分成空正则和非空正则两种
                if (j == 0) {
                    //空正则
                    dp[i][j] = (i == 0);//如果s也是空，那就匹配，否则不匹配
                } else {
                    //非空正则分为两种情况 * 和 非*
                    //不是*
                    if (p.charAt(j - 1) != '*') {
                        if (i > 0 && (s.charAt(i - 1) == p.charAt(j - 1) || p.charAt(j - 1) == '.')) {
                            dp[i][j] = dp[i - 1][j - 1];
                        }
                    } else {
                        //碰到 * 了，分为看和不看两种情况，只要有一种可以匹配，那就可以匹配
                        //不看
                        if (j >= 2) {
                            dp[i][j] |= dp[i][j - 2];//这里的或等于可以换成等于
                        }
                        //看
                        if (i >= 1 && j >= 2 && (s.charAt(i - 1) == p.charAt(j - 2) || p.charAt(j - 2) == '.')) {
                            //*可以表示多个，因此j不动，只需要i-1即可
                            dp[i][j] |= dp[i - 1][j];//这里的或等于不可以换成等于
                            //其中，第一步先算的是不看‘*’的情况，然后第二步再算看‘*’的情况。也就是说，
                            //对于f[i][j]我们会算两 次。如果在第一次，即不看'*'的时候，就已经算出来TURE了。
                            //那在第二步看'*'的时候。不管结果是ture还是false，都保持true不变，这是合理的，
                            //因为只要其中有一种情况能完整匹配，结果就为true。这就是为什么要用或符号。
                            // 这个不难证明，举个例子 "ba" "baa*" 这种情况下直接用=号过不了。
                        }
                    }
                }
            }
        }
        return dp[n][m];
    }
}
```

