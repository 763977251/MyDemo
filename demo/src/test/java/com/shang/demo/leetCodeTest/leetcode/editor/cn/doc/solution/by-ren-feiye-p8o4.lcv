此处不对理论做证明，和固定求乘积最大，每段最优为3，所以需要看一个绳子可以分成几段3

### 方法一：快速幂求余，时间O(logn)

**前置知识**

`快速幂算法原理:`

如需求数据 a 的幂次，此处 a 可以为数也可以为矩阵，常规做法需要对a进行不断的乘积即 a * a * a * ... 此处的时间复杂度将为 O(n)

以求 3^10 的结果为例：

[优化步骤1：]

易知：

* java

~~~java
3^10=3*3*3*3*3*3*3*3*3*3

    =9^5 = 9^4*9

    =81^2*9

    =6561*9
~~~

基于以上原理，我们在计算一个数的多次幂时，可以先判断其幂次的奇偶性，然后：

- 如果幂次为偶直接 base(底数) 作平方，power(幂次) 除以2

- 如果幂次为奇则底数平方，幂次整除于2然后再多乘一次底数

[优化步骤2：]

对于以上涉及到 [判断奇偶性] 和 [除以2] 这样的操作。使用系统的位运算比普通运算的效率是高的，因此可以进一步优化：

- 把 `power % 2 == 1` 变为 `(power & 1) == 1`

- 把 ` power = power / 2` 变为 `power = power >> 1`

由上面理论，给出快速幂模版求 底数为base，幂次为pow的代码如下：

* java

```java
//快速幂模版
    //递归的进行x的n次方计算
    public int culc(int base, int power) {
        int res = 1;

        while (power > 0) {
            //两种情况会进入if语句：
            //1.幂次若为奇数，提前多乘一次x
            //2.当幂次除到1，把x赋值给res
            if ((power & 1) == 1) {
                res *= base;
            }
            //幂次除以2
            power = power >> 1;
            //底数平方
            base = base * base;
        }
        return res;
    }
```

**针对本题的快速幂求余解法：**

思路：

1.根据理论推导，绳子每段最好为3，

2.所以对于一个长度 n ，对 n 除以 3 取整可以得到需要的幂次 pow

3.对 n 取余可以得到最后一段的长度 last

4.要得到 结果 res，需要 3的 pow次方再乘以 last 即可，如 n 为 14，需要 `3 * 3 * 3 * 3 * 2`

5.特别的，需要最后对 last 进行讨论，若 last 为 1 ，需要拆分上一个3，变成`2 * 2`

* java

```java
class Solution {
    private static final int NUM_MOD = 1000000007;

    public int cuttingRope(int n) {
        //特例讨论
        if (n <= 3) {
            return n - 1;
        }
        //创建变量：底数，幂次，最后一段长度,结果变量
        //因为 int最大值小于 1e9+7的平方 ，在下面计算中，定义为int类型的res和base有超出的风险
        //但 long最大值大于 1e9+7的平方，所以定义为 long 安全
        long base = 3;
        int pow = n / 3;
        int last = n % 3;
        long res = 1;

        //单独讨论最后一段,最后一段可能为 0，1，2
        if (last == 2) return (int) (myPow(res, base, pow) * 2 % NUM_MOD);
        //针对last ==1的情况，一个思考，可不可以先乘完 pow次再 /3*4 这样的操作？
        //答案是不能，因为情况可能是，在乘第pow次3后导致超出然后取模，再除以3便不能还原未乘最后一次3的时候的结果了
        //举例：设定超 10 取模，绳子长10，如果3*3*3 %10=7，7/3*4%10这样算，是得不到 3*3*4%10结果的
        if (last == 1) return (int) (myPow(res, base, pow - 1) * 4 % NUM_MOD);
        return (int) myPow(res,base,pow);
    }

    //开始快速幂，底数为 base 指数为 pow
    //注意每次涉及乘积需要取模 1e9+7
    public long myPow(long res, long base, int pow) {
        while (pow > 0) {
            //指数为奇数和1的情况
            if ((pow & 1) == 1) {
                res = res * base % NUM_MOD;
            }
            pow = pow >> 1;
            base = base * base % NUM_MOD;
        }
        return res;
    }
}
```

### 方法二：循环求余，时间O(n)

贪心 + 循环求余：每次都想取 3;

定义 mul 作为乘积，每次乘 3 后，n 要减3，以此实现有多少3乘多少3；

需要讨论的是最后一段的取值，若最后一段余下2，3，4直接返回，因为特例最后一段为 1 时需要拆为 `2 * 2`.

* java

```java
class Solution {
    public int cuttingRope(int n) {
        if (n <= 3) {
            return n - 1;
        }

        //最大int 2147483647，为防止在某一次 mul乘3已经溢出，类型需要设为long
        long mul = 1;

        //3,3,3,3,3,4
        //3,3,3,3,3,3
        //3,3,3,3,3,2
        //3,3,3,3,3,1  X 此种情况算在和前面 3+1 和为 4
        while (n > 4) {
            //每次乘积后取余防止大数
            mul = mul * 3 % 1000000007;

            n -= 3;
        }
        return (int) (mul * n % 1000000007);
    }
}
```

