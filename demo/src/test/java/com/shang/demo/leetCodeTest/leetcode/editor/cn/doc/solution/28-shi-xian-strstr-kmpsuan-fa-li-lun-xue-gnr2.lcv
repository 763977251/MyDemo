### KMP的经典思想

- 当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。
- 再具体一点解释，相对暴力解法来说。优化的方案是：不回退原串的指针位置，而仅回退查找串的指针位置，就能最终判断原串是否包含查找串，从而减少匹配次数，提升效率。
- 而KMP算法在实现上，关键是通过构造查找串的前缀表来达到上述效果的。
- 前缀表保存的是：查找串上的每个位置，其对应的字符与原串某个位置的字符不一致时，查找串的指针（该位置），应向前跳转到哪个位置上，继续与原串当前位置进行比较。最坏情况，是回溯至查找串的首字符位置（起始位置）。此种情况代表，原串当前位置所形成的子串与查找串指针的当前位置所形成的子串，不存在公共前缀；如果有，则前缀表就能告知查找串指针跳转到具有公共前缀串的后一个位置，然后继而进行比较。
  以下动态图可以帮助理解。当原串[5]上的b与查找串[5]上的f不一致时，通过前缀表找到了跳转位置2，即查找串[2]的位置，然后继续比较，aa前缀是相同的。
  ![640.gif](https://pic.leetcode-cn.com/1621008976-CzTdrI-640.gif)

![68747470733a2f2f636f64652d7468696e6b696e672e63646e2e626365626f732e636f6d2f676966732f4b4d50254537254232254245254538254145254232322e676966.gif](https://pic.leetcode-cn.com/1621008949-JMmyUN-68747470733a2f2f636f64652d7468696e6b696e672e63646e2e626365626f732e636f6d2f676966732f4b4d50254537254232254245254538254145254232322e676966.gif)
【注】动图来自大神carl的代码随想录。本人太懒，且目标是面试刷题，并非教书育人，所以只能”盗图“使用。
不难发现，相比暴力解法，当发现某个字符串不一致时，并没有将两个字符串的指针都进行大幅回退，重新比较。而是做了两重优化：<1> 原串指针不回退，减少了比较次数；<2> 查找串指针回退，但不是直接回退到起始位置重新比较，而是公共前缀位置。只有在完全没有公共前缀的情况下，才会回退到起始位置。因此，也大大减少了比较次数。

### 总结：

说完了KMP算法的思想，就知道其关键所在即：「如何构建前缀表」，一般又称之为next表。然后，就是利用这个前缀表去匹配查找即可了。自信无法讲明白，就直接借鉴大神的之作《[帮你把KMP算法学个通透](https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0028.%E5%AE%9E%E7%8E%B0strStr.md)》，这里不再敖述。

### 代码

* scala

```scala
import scala.util.control.Breaks._
object Solution {
  //28. 实现 strStr()
  def strStr(haystack: String, needle: String): Int = {
    val h_leng = haystack.length
    val n_leng = needle.length

    if (n_leng == 0 ) return 0
    if (h_leng == 0 ) return -1

    val next = build_next(needle)
    var j = -1
    for(i <- (0 until h_leng) ){
       while(j>=0 && haystack(i) != needle(j+1)){
         j = next(j) 
       }

       if(haystack(i) == needle(j+1)){
         j += 1
       }
       if ( j == n_leng - 1 ) return i - j
    }
    return -1
  }

  //构建KMP前缀表next
  def build_next(s:String): Array[Int] ={
    val s_len = s.length
    var j = -1
    val next = Array.fill(s_len)(-1)
    next(0) = j
    for(i <- ( 1 until s_len ) ){

      while(j >= 0 && s(i) != s(j+1) ){
        j = next(j)  //向前回退
      }

      if(s(i) == s(j+1)){
        j += 1
      }
      next(i) = j   //将j(前缀长度)赋予next(i)
    }
    next
  }
}
```

### 自己的一点小理解

strStrKmp匹配查找函数中的for{while{}}的执行逻辑/代码实现与build_next函数中的for{while{}}的执行逻辑/代码实现，几乎一模一样。这是因为，两个字符串的匹配查找，就是在执行构建next函数中的那段for{while{}}逻辑，只不过匹配部分就不是再计算每个位置的next了，而是直接利用每个位置对应的next的跳转记录，去实现查找串的自我位置调整（跳转），当位置j一直都不往前跳转，长度与查找串一致时，就代表了匹配上了查找串。那么，此时i的位置减去j的位置（return i - j），就是包含查找串的起始位置了。那么，不难发现：
无论原串是什么，只要查找串相同，都将具有相同的前缀表next，strStrKmp的for{while{}}代码将利用相同的next，去查找原字符串是否包含查找串。**所以，再次强调KMP算法的核心与灵魂是：前缀表next的构建。会了next的代码实现，匹配查找的代码，就几乎是原样copy。**
