### 思路

通常树的遍历方式有如下几种(很好记, 可以用 **`中`** 的位置来做标记)
1. 前序遍历: **`中左右`**
2. 中序遍历: **`左中右`**
3. 后序遍历: **`左右中`**

题目要求由前序遍历和中序遍历得出树的结构。前序遍历顺序为 **`中左右`** 可得知 **`第一个位置`** 是根节点，我们找到根节点后那么叶子节点我们可以从中序遍历(**`左中右`**)中得出在根节点的两侧。因此我们可以得出当前根节点左右子树节点到底有哪些。按照上述条件我们可以通过递归来进行建树了。

### 举一个🌰 吧～

就题目的例子，已知前序遍历为 **`[3, 9, 20, 15, 7]`**，中序遍历为 **`[9, 3, 15, 20, 7]`**.
1. 由前序 **`[3, 9, 20, 15, 7]`** 我们可以知道根节点为 **`3`**，通过中序遍历 **`[9, 3, 15, 20, 7]`** 可以得出 **`3`** 的左子树为 **`[9]`**、右子树为 **`[15, 20, 7]`**。
2. 前序遍历就可以划分为 **`[3, [9], [20, 15, 7]]`**，我们可以计算出左子树 **`[9]`** 的根节点为 **`9`**，右子树 **`[20, 15, 7]`** 的根节点为 **`20`**。
3. 构建 **`3`** 的左子树，由中序遍历 **`[9]`** 可以看出只有当一节点，构建叶子结点并返回。
4. 构建 **`3`** 的右子树，通过中序遍历 **`[15, 20, 7]`** 可以得出 **`20`** 的左子树为 **`[15]`**、右子树为 **`[7]`**。
5. 前序遍历就可以划分为 **`[20, [15], [7]]`**，我们可以计算出左子树 **`[15]`** 的根节点为 **`15`**，右子树 **`[7]`** 的根节点为 **`7`**。
6. 构建 **`20`** 的左子树，由于由中序遍历 **`[15]`** 可以看出只有当一节点，构建叶子结点并返回。
7. 构建 **`20`** 的右子树，由于由中序遍历 **`[7]`** 可以看出只有当一节点，构建叶子结点并返回。
8. 构建流程结束。

### 实现代码如下

* javascript

```javascript
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} preorder
 * @param {number[]} inorder
 * @return {TreeNode}
 */
var buildTree = function(preorder, inorder) {
    function TreeNode(val) {
      this.val = val;
      this.left = this.right = null;
    }
    const dfs = (index, arr) => {
        if (index < preorder.length) {
            const targetVal = preorder[index];
            const newRoot = new TreeNode(targetVal);
            const targetIndex = arr.indexOf(targetVal);
            if (targetIndex !== -1) {
                const leftArr = arr.slice(0, targetIndex);
                newRoot.left = dfs(index + 1, leftArr);
                const rightArr = arr.slice(targetIndex + 1);
                newRoot.right = dfs(index + leftArr.length + 1, rightArr);
                return newRoot;
            }
        }
        return null;
    }
    return dfs(0, inorder);
};
```

![image.png](https://pic.leetcode-cn.com/1650809564-iWQIRH-image.png)
