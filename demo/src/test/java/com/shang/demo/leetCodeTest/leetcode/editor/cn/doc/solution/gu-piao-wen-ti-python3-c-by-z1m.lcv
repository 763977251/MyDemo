### 介绍

股票问题一共有六道：买卖股票的最佳时机（1，[2](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/)，[3](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/)，[4](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/)）、[含冷冻期](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/)、[含手续费](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)。本题是第一道，属于入门题目。

股票问题的方法就是 *动态规划*，因为它包含了重叠子问题，即买卖股票的最佳时机是由之前买或不买的状态决定的，而之前买或不买又由更早的状态决定的...

由于本题只有一笔交易（买入卖出），因此除了动态规划，我们还可以使用更加简便的方法实现。

### 思路（官方题解方法二：一次遍历）

遍历一遍数组，计算每次 **到当天为止** 的最小股票价格和最大利润。

![0121.gif](https://pic.leetcode-cn.com/4eaadab491f2bf88639d66c9d51bb0115e694ae08d637841ac18172b631cb21f-0121.gif)

#### 代码

* []

```python
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        minprice = float('inf')
        maxprofit = 0
        for price in prices:
            minprice = min(minprice, price)
            maxprofit = max(maxprofit, price - minprice)
        return maxprofit
```

* []

```C++
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minprice = int(1e9);
        int maxprofit = 0;
        for (auto price : prices){
            maxprofit = max(maxprofit, price - minprice);
            minprice = min(minprice, price);
        }
        return maxprofit;
    }
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，遍历了一遍数组。
- 空间复杂度：$\mathcal{O}(1)$，使用了有限的变量。

### 方法二：动态规划

动态规划一般分为一维、二维、多维（使用[状态压缩](https://leetcode-cn.com/problems/maximum-students-taking-exam/solution/xiang-jie-ya-suo-zhuang-tai-dong-tai-gui-hua-jie-f/)），对应形式为 $dp(i)$、$dp(i)(j)$、$二进制dp(i)(j)$。

*1. 动态规划做题步骤*
- 明确 $dp(i)$ 应该表示什么（二维情况：$dp(i)(j)$）；
- 根据 $dp(i)$ 和 $dp(i-1)$ 的关系得出状态转移方程；
- 确定初始条件，如 $dp(0)$。

*2. 本题思路*

其实方法一的思路不是凭空想象的，而是由动态规划的思想演变而来。这里介绍一维动态规划思想。

$dp[i]$ 表示前 $i$ 天的最大利润，因为我们始终要使利润最大化，则：

$dp[i] = max(dp[i-1], prices[i]-minprice)$

#### 代码

* []

```python
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n == 0: return 0 # 边界条件
        dp = [0] * n
        minprice = prices[0] 

        for i in range(1, n):
            minprice = min(minprice, prices[i])
            dp[i] = max(dp[i - 1], prices[i] - minprice)

        return dp[-1]
```

* []

```C++
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if (n == 0) return 0; // 边界条件
        int minprice = prices[0];
        vector<int> dp (n, 0);

        for (int i = 1; i < n; i++){
            minprice = min(minprice, prices[i]);
            dp[i] = max(dp[i - 1], prices[i] - minprice);
        }
        return dp[n - 1];
    }
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$。
- 空间复杂度：$\mathcal{O}(n)$。

