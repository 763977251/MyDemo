### 解题思路

穷举 **十大排序算法**: **"冒泡排序、插入排序、选择排序、归并排序、快速排序、堆排序、希尔排序、桶排序、计数排序、基数排序"**。

![image.png](https://pic.leetcode-cn.com/1649815025-tWiRyo-image.png)

**相关排序复杂度列表**

![排序.jpeg](https://pic.leetcode-cn.com/1649815665-QzzIKx-37d12f2eb9389b50085feba938a1a7dbe5116ec7.jpeg)

如果想了解 各大算法的演示过程，可以去 [传送门](https://visualgo.net/en/sorting),可以更好的帮助你理解各大算法的排序过程。

还有一些图 来自 王争老师的 [《数据结构与算法之美》](https://time.geekbang.org/column/intro/100017301?tab=catalog) 初学者可以去了解一下。

最近看到一篇文章，如果想了解 各大算法的详细情况的话，建议可以看看这篇文章 [十大排序从入门到入赘](https://leetcode.cn/circle/discuss/eBo9UB/), 而这里仅我个人用来记录方便自己学习。。。

#### 1. 冒泡排序（超时）

很遗憾，超时了

![冒泡.gif](https://pic.leetcode-cn.com/1649815437-HnkzcF-b7d216a5b292cf3a5412bbc7fbb56a9e.gif)

代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {
      var arr = nums
      var flag = true
    
      for i in 0..<arr.count {
        for j in 0..<arr.count-i-1 {
          if arr[j] > arr[j+1] {
            arr.swapAt(j, j+1)
            flag = true
          }
        }
        //!
        if flag == false {
          break
        }
      }
      return arr
    }
}
```

* []

```c
int* sortArray(int* nums, int numsSize, int* returnSize){
    *returnSize = numsSize;
    if (numsSize <= 1) {
      return nums;
    }
    bool flag = true;
    for (int i = 0; i < numsSize; ++i) {
      flag = false;
      for (int j = 0; j < numsSize-i-1;++j) {
        if (nums[j] > nums[j+1]) {
          int temp = nums[j];
          nums[j] = nums[j+1];
          nums[j+1] = temp;
          flag = true;
        }
      }
      if (!flag) {
        break;
      }
    }
    return nums;
}
```

* []

```java
class Solution {
    public int[] sortArray(int[] nums) {
      boolean flag = true;
      for (int i = 0; i < nums.length; i++) {
        for (int j = 0; j < nums.length-i-1;j++) {
          if (nums[j] > nums[j+1]) {
            int temp = nums[j];
            nums[j] = nums[j+1];
            nums[j+1] = temp;
          }
        }
        if (flag == false) {
          break;
        }
      }
      return nums;
    }
}
```

> 除了 冒泡，后面的算法都通过了测试用例，当然这只是针对 swift 。

#### 2. 插入排序

将数组分为 **已排序区** 和 **未排序区**， 将 **未排序区间** 的元素拿到，然后在 **已排序区间** 寻找插队的位置即可。这里我们可以模拟一下过程，在前面是有序队伍的情况下，姗姗来迟的你 拿着预定好的号牌，依次和前面有序的人比较，发现你的号牌比他靠前，就跟他说，兄弟，我在你前面，我们换一下位置。直到插队到合适的位置。

![插入.jpeg](https://pic.leetcode-cn.com/1649815534-IvUEMW-622762d0f703918f7778516ceda9649158eec402.jpeg)

代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {
      if nums.count <= 1 {
        return nums
      }
      var arr = nums
      for i in 1..<arr.count {
        //! 当前遍历，需要比较的数字 value
        let value = arr[i]
        var j = i - 1
        //! 遍历value前面的数组，j不停变小
        while j >= 0 {
          if arr[j] > value {
            arr[j+1] = arr[j]
          } else {
            //! 没有找到比当前值小的，不需要移动
            break
          }
          j -= 1
        }
        //！ 最后定位到 value的位置
        arr[j+1] = value
      }
      return arr
    }
}
```

* []

```c
int* sortArray(int* nums, int numsSize, int* returnSize){
    *returnSize = numsSize;
    if (numsSize <= 1) {
      return;
    }
  
    //! 从第二个元素开始比较 插入
    for (int i = 1; i < numsSize; ++i) {
      //! 当前遍历 需要比较的数字 value
      int value = nums[i];
      int j = i - 1;
      //! 遍历value前面的数组，j不停变小
      for (; j >= 0; --j) {
        if (nums[j] > value) { //! 如果找到比value大的数字，数据向后移动，
          nums[j+1] = nums[j];
        } else { //! 没有找到比当前值小的，不需要移动
          break;
        }
      }
    
      //！ 最后定位到 value的位置
      nums[j+1] = value;
    
    }
    return nums;
}
```

* []

```java
class Solution {
    public int[] sortArray(int[] nums) {
      if (nums.length <= 1) {
        return nums;
      }
      for(int i = 1; i < nums.length; i++) {
        int value = nums[i];
        int j = i - 1;
        while (j >= 0) {
          if (nums[j] > value) {
            nums[j+1] = nums[j];
          } else {
            break;
          }
          j -= 1;
        }
        nums[j+1] = value;
      }
      return nums;      
    }
}
```

> C 语言 插入排序 超时

#### 3. 选择排序

我们依然将数组分为 **有序区**和 **无序区**， 每一次在 **未排序**区间 选择一个最小的值放在已排序区间的右侧，这样 有序区依然有序，且元素增加，无序区元素减少，依次下去， 直到全部有序，无序区清空。

![选择.gif](https://pic.leetcode-cn.com/1649815456-etJcct-d01373f082025aaf4bb74b094479e962014f1a81.gif)

代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {   
      if nums.count <= 1 {
        return nums
      }
      var arr = nums
      /*
       *  最后一次不需要遍历。因为只剩下一个元素了
       */
      for i in 0..<arr.count-1 {
        //！ 未排序最小值，默认取已排序的最后一个元素
        var temp = arr[i]
        //！ 用于定位最小值 角标
        var minIndex = i
        for j in i+1..<arr.count {
          if temp > arr[j] {
            temp = arr[j]
            minIndex = j
          }
        }
        arr.swapAt(i, minIndex)
        //! 区间+1
      }
      return arr
    }
}
```

* []

```c
int* sortArray(int* nums, int numsSize, int* returnSize){
    *returnSize = numsSize;
    if (numsSize == 1) {
      return;
    }
  
    //! 已排序区间角标
    int point = 0;
    //！ 定位最小值 角标
    int k = point;
  
 
    for (int i = 0; i < numsSize-1; ++i) {
      //！ 未排序最小值，默认取已排序的最后一个元素
      int temp = nums[point];
      int k = point;
      for (int j = point; j < numsSize; ++j) {
        if (temp > nums[j]) {
          temp = nums[j];
          k = j;
        }
      }

      //! 交换
      nums[k] = nums[point];
      nums[point] = temp;
      //! 区间+1
      ++point;
    
    }
    return nums;
}
```

* []

```java
class Solution {
    public int[] sortArray(int[] nums) {
      if (nums.length <= 1) {
        return nums;
      }
   
      for (int i = 0; i < nums.length-1; i++) {
        int temp = nums[i];
        int minIndex = i;
        for (int j = i+1;j < nums.length;j++) {
          if (temp > nums[j]) {
            temp = nums[j];
            minIndex = j;
           }
        }
        if (minIndex != i) {
          nums[minIndex] = nums[i];
          nums[i] = temp;
        }
      
     }
     return nums;       
  }
}
```

> C 语言 和 java 都超时了

#### 4. 归并排序

归并排序 是将两个有序数组合并为一个有序数组。主要思想是采用分而治之的思想，将整个无序数组分割成多个小数组，分别将小数组排序，最后再合并为一个有序数组。

![归并.gif](https://pic.leetcode-cn.com/1649815565-GLECkj-9541d116b9ad191437cb0f9acce7baf6.gif)

代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {
      if nums.count <= 1 {
        return nums
      }
      var arr = nums
      merge_sort_c(&arr, 0, arr.count-1)
      return arr
    }

    func merge_sort_c(_ nums:inout [Int], _ left :Int, _ right:Int) {
      if left >= right {
        return
      }
      let point = (left+right)/2
      merge_sort_c(&nums, left, point)
      merge_sort_c(&nums,point+1,right)
      //! 合并
      merge_arr(&nums,left,point,right)
    }
  
    func merge_arr(_ nums:inout [Int], _ left :Int, _ point:Int, _ right:Int) {
      var i = left
      var j = point+1
      var k = 0
      var arr = [Int](repeating: 0, count: right-left+1)
    
      while i <= point && j <= right {
        if nums[i] <= nums[j] {
          arr[k] = nums[i]
          i += 1
        } else {
          arr[k] = nums[j]
          j += 1
        }
        k += 1
      }
    
      if i == point + 1 {
        while j <= right {
          arr[k] = nums[j]
          k += 1
          j += 1
        }
      } else {
        while i <= point {
          arr[k] = nums[i]
          k+=1
          i+=1
        }
      }
    
      for index in 0..<arr.count {
        nums[left+index] = arr[index]
      }
  }
}
```

* []

```c
//! 递归调用函数
void merge_sort_c (int* nums, int p, int r);
//! 合并函数
void merge_arr (int* nums, int p, int q, int r);

int* sortArray(int* nums, int numsSize, int* returnSize){
    merge_sort_c(nums,0,numsSize-1);
    *returnSize = numsSize;
    return nums;
}

void merge_sort_c (int* nums, int p, int r) {
    //! 递归终止条件
    if (p >= r) {
      return;
    }
  
    //! 取p到r之间的中间位置q
    int q;
    q = (p+r)/2;
  
    merge_sort_c(nums,p,q);
    merge_sort_c(nums, q+1, r);
    //! 合并
    merge_arr(nums,p,q,r);
}

void merge_arr (int* nums, int p, int q, int r) {
    int *temp;
    int i , j , k ;
  
    //! 创建一个连续的空间 作为临时数组
    temp = (int *)malloc((r-p+1) * sizeof(int));
  
    if (!temp) {
      abort();
    }
  
    for (i = p,j = q+1,k=0; i<=q && j<= r;) {
      if (nums[i] <= nums[j]) {
        temp[k++] = nums[i++];
      } else {
        temp[k++] = nums[j++];
      }
    
    }
  
    //!
    if (i == q+1) {
      for (; j <= r;) {
        temp[k++] = nums[j++];
      }
    
    } else {
      for (; i <= q; ) {
        temp[k++] = nums[i++];
      }
    }
  
    //! 拷贝回原来的数组
    memcpy(nums+p,temp,(r-p+1) * sizeof(int));
    free(temp);
}
```

* []

```java
class Solution {
    public int[] sortArray(int[] nums) {
      if (nums.length <= 1) {
        return nums;
      }
      merge_sort_c(nums,0,nums.length-1);
      return nums;
    }

    private void merge_sort_c(int[] nums, int left, int right) {
      if (left >= right) {
        return;
      }

      int point = (left+right)/2;
      merge_sort_c(nums,left,point);
      merge_sort_c(nums,point+1,right);
      merge_arr(nums,left,point,right);
    }

    private void merge_arr(int[] nums, int left, int point, int right) {
      int i = left;
      int j = point + 1;
      int k = 0;
      int [] arr = new int[right-i+1];

      while (i <= point && j <= right) {
        if (nums[i] <= nums[j]) {
          arr[k] = nums[i];
          i += 1;
        } else {
          arr[k] = nums[j];
          j += 1;
        }
        k += 1;
      }

      if (i == point + 1) {
        while (j <= right) {
          arr[k] = nums[j];
          k += 1;
          j += 1;
        }
      } else {
        while (i <= point) {
          arr[k] = nums[i];
          k += 1;
          i += 1;
        }
      }
      System.arraycopy(arr,0,nums,left,arr.length);
    }
}
```

#### 5. 快速排序

快排，我们让 **区间末尾** 作为 **锚点**，小于锚点的值在左边，维护一个 i 来标记 其窗口右侧，或者我们可以认为， 最终 i 是第一个大于 锚点的元素，之后，我们将 锚点和 i所在位置数据交换，那么 此时 i 的左侧 是小于锚点的，右侧是大于锚点的，整体看就相对有序了，此时以 **锚点**为标准，分成两个区间，这两个区间重复上述操作，区间就越来越小，直至完全有序。  （PS: 有点像我们以前小时候说的话，男的在左边，女的在右边，不男不女在中间）

> 如果说 归并排序是将局部有序，慢慢上升至整体有序，那么快排就是反过来的，先整体有序，再局部有序。

![快排.gif](https://pic.leetcode-cn.com/1649815595-sadgPK-71c0f1c0ceb0e053c423426e7f343602.gif)

代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {
      var arr = nums
      quick_sort(&arr, 0, arr.count-1)
      return arr
    }

    func quick_sort(_ nums:inout [Int], _ left:Int, _ right : Int) {
      if left >= right {
        return
      }
      let point = partitin(&nums, left, right)
      quick_sort(&nums, left, point-1)
      quick_sort(&nums, point+1,right)
    }
  
    func partitin(_ nums:inout [Int], _ left:Int, _ right : Int) -> Int {
      var i = left
      //! 默认 区间最后一个元素 是锚点，所以直接遍历数组 跟锚点比较
      /*  你也可以将此代码打开，进行随机锚点
      let q = Int.random(in: left...right)
      nums.swapAt(q, right)
       */
      for j in left..<right {
        if nums[j] < nums[right] {
          if i != j {
            nums.swapAt(i, j)
          }
          i+=1
        }
      }
      nums.swapAt(i, right)
      return i
    }
}
```

* []

```c
//! 递归函数，
void quick_sort (int* nums,int p, int r);
// 分区函数
int partition (int* nums, int p, int r);
//！ 交换函数
void swap(int *nums, int i,int j);

int* sortArray(int* nums, int numsSize, int* returnSize){
  quick_sort(nums, 0, numsSize-1);
  *returnSize = numsSize;
  return nums;
}

void quick_sort (int* nums,int p, int r) {
  if (p >= r) {
    return;
  }
  int q;
  //!  
  q = partition(nums, p, r);
  quick_sort(nums, p,q-1);
  quick_sort(nums, q+1, r);
}

int partition (int* nums, int p, int r) {
  int i,j;
  i = j = p;

  //! 随机选择一个元素作为锚点，跟最后一个元素交换
  int q = rand() % (r - p + 1) + p;
  swap(nums,q,r);
 
  for (; j < r; j++) {
    if (nums[j] < nums[r]) {
      if (i != j) {
        swap(nums,i,j);
      }
      i++;
    }
  }
  swap(nums,i,r);
  return i;
}

//！ 交换函数
void swap(int *nums, int i,int j) {
  int tmp = nums[i];
  nums[i] = nums[j];
  nums[j] = tmp;
}
```

* []

```java
class Solution {
    public int[] sortArray(int[] nums) {
      quick_sort(nums, 0, nums.length - 1);
      return nums;
    }

    private void quick_sort(int[] nums, int left, int right) {
      if (left >= right) {
        return;
      }
       
      int point = partitin(nums, left, right);
      quick_sort(nums, left, point - 1);
      quick_sort(nums, point + 1, right);
    }

    private int partitin(int[] nums, int left, int right) {
      int i = left;
      //! 随机挑选一个幸运儿
      int q = new Random().nextInt(right - left + 1) + left;
      swap(nums, right, q);

      for (int j = left;j < right; ++j) {
        if (nums[j] < nums[right]) {
          if (i != j) {
            swap(nums, i, j); 
          }
          i += 1;
        }
      }
      swap(nums, i, right);
      return i;
    }

    private void swap(int[] nums, int i, int j) {
      int temp = nums[i];
      nums[i] = nums[j];
      nums[j] = temp;
    }
}
```

> 不使用 随机锚点，可能会超时！！！！ 因此图1快排时间略长

#### 6. 堆排序

参考王争老师的代码，因为不能 存在 **重复元素**(取堆顶，并重新堆化的时候，会出问题)，因此使用字典保存值和出现的频率。这里我们使用小顶堆，反复从堆顶拿到数据后，再一次堆化。我们这里使用了小顶堆，将堆顶和堆数组末尾交换，取出来放入结果数组中。

> 我们也可以使用大顶堆，每次将堆顶和堆数组末尾交换，并且将堆的大小-1。这样就不需要新建一个结果数组了

![堆排序.jpg.webp](https://pic.leetcode-cn.com/1649815939-bsDmog-23958f889ca48dbb8373f521708408d1.jpg.webp)

而 Java 可以直接使用优先队列。

代码如下：

* []

```swift
class Solution {
    //! 小顶堆
    var minHeap = [Int]()
    //！堆真正元素的数量
    var count = 0
    func sortArray(_ nums: [Int]) -> [Int] {
      minHeap = [Int](repeating: Int.max, count: nums.count+1)
      //！ 用哈希表保存防止重复元素
      var dict = [Int:Int]()
      for num in nums {
        dict[num] = (dict[num] ?? 0) + 1
      }
      //!
      for key in dict.keys {
        insert(key)
      }
    
      var res = [Int]()
    
      while count > 0 {
        //! 将堆顶拿到
        let num = minHeap[1]
        let lenght = dict[num]!
        for _ in 0..<lenght {
          res.append(num)
        }
        removeTop()
      }
      return res
    }

    func insert(_ key: Int) {
      count+=1
      minHeap[count] = key;
      var j = count
      while j/2 > 0 && minHeap[j] < minHeap[j/2] {
        minHeap.swapAt(j, j/2)
        j = j/2
      }
    }
  
    func removeTop() {
      if count == 0 {
        return
      }
      minHeap[1] = minHeap[count]
      minHeap.removeLast()
      count -= 1
      heapify()
    }
  
    func heapify()  {
      var index = 1
      while true {
        var postionIndex = index
        //！ 
        let left = index * 2
        let right = left + 1
        if left <= count && minHeap[index] > minHeap[left] {
          postionIndex = left
        }
        if right <= count && minHeap[postionIndex] > minHeap[right] {
          postionIndex = right
        }
      
        if postionIndex == index {
          //! 说明不需要进行操作
          break
        }
        minHeap.swapAt(index, postionIndex)
        index = postionIndex
      }
    }
}
```

* []

```java
class Solution {
    public int[] sortArray(int[] nums) {
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(new Comparator<Integer>() {
            public int compare(Integer m, Integer n) {
                return m - n;
            }
        });

        for (int i = 0; i < nums.length; ++i) {
            queue.offer(nums[i]);
        }
        int index = 0;
        while (queue.size() > 0) {
            int num = queue.poll();
            nums[index] = num;
            index += 1;
        }
        return nums;
    }
}
```

#### 7. 希尔排序

希尔排序 是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。

这里了解即可，因为它的历史意义大于其实用。

![希尔.gif](https://pic.leetcode-cn.com/1649815768-SRTWRp-9b2d1b9b2a7c5eae4db42d94d3cfb748.gif)

代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {
      var arr = nums
      shell_sort(&arr)
      return arr
    }
  
    func shell_sort(_ nums:inout [Int]) {
      var step = nums.count/2
      while step > 0 {
        //!
        for i in step..<nums.count {
          let tmp = nums[i]
          var j = i - step
          while j >= 0 && tmp < nums[j] {
            nums[j+step] = nums[j]
            j -= step
          }
          nums[j + step] = tmp
        }
        step = step/2
      }
    }
}
```

* []

```c
int* sortArray(int* nums, int numsSize, int* returnSize){
    *returnSize = numsSize;
    int step = numsSize/2;
    while (step > 0) {
      //!
      for(int i = step;i<numsSize;++i) {
        int tmp = nums[i];
        int j =  i - step;
        while (j >= 0 && tmp < nums[j]) {
          nums[j+step] = nums[j];
          j -= step;
        }
        nums[j + step] = tmp;
      }
      step = step/2;
    }
    return nums;
}
```

#### 8. 桶排序

**桶排序的原理：**

将元素分布到不同的桶中，最后将每一个桶排序。将所有桶的元素遍历即为最终的有序数组。

![桶排序.jpeg](https://pic.leetcode-cn.com/1649815629-RyvKRI-9f510fb30f2442a77ed28a216cd7ef4dd31302f4.jpeg)

代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {

      let minValue = nums.min()!
      let maxValue = nums.max()!
    
      let bucketSize = 100
      //! 桶的数量
      let bucketCount = (maxValue - minValue) / bucketSize + 1
      //! 桶
      var buckets = [[Int]](repeating: [Int](), count: bucketCount)
    
      // 将数组中值分配到各个桶里
      for i in 0..<nums.count {
        let bucketIndex = (nums[i] - minValue) / bucketSize
        buckets[bucketIndex].append(nums[i])
      }
    
      //! 对每一个桶进行排序
      var res = [Int]()
      for var bucket in buckets {
        if bucket.count == 0 {
          continue
        }
        //! 对每一个桶进行排序，这里直接使用系统排序 也可以调用上面的快排
        bucket.sort()
        for num in bucket {
          res.append(num)
        }
      }
      return res
    }
}
```

* []

```java
class Solution {
    public int[] sortArray(int[] nums) {

      int minValue = Arrays.stream(nums).min().getAsInt();
      int maxValue = Arrays.stream(nums).max().getAsInt();
    
      int bucketSize = 100;
      //! 桶的数量
      int bucketCount = (maxValue - minValue) / bucketSize + 1;
      //! 桶
      List<ArrayList<Integer>>  buckets = new ArrayList<>(bucketCount);
    
      for (int i = 0; i < bucketCount; i++) {
        buckets.add(new ArrayList<>());
      }

      // 将数组中值分配到各个桶里
      for (int i = 0; i < nums.length;++i) {
        int bucketIndex = (nums[i] - minValue) / bucketSize;
        buckets.get(bucketIndex).add(nums[i]);
      }
    
      //! 对每一个桶进行排序
      int[] res = new int[nums.length];
      int index = 0;
      for (List<Integer> bucket : buckets) {
        if (bucket.size() == 0) {
          continue;
        }
        //! 对每一个桶进行排序，这里直接使用系统排序 也可以调用上面的快排
        bucket.sort(Comparator.naturalOrder());

        for (int num : bucket) {
          res[index++] = num;
        }
      }
      return res;
    }
}
```

#### 9. 计数排序

用数组坐标来代表 元素，数组内容代表元素个数，因为数字坐标本身有序，因此我们可以实现一个非基于比较的排序算法

![计数排序.gif](https://pic.leetcode-cn.com/1649836691-BOLvDU-20200210211952977.gif)

代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {
      let min = nums.min()!
      let max = nums.max()!
    
      var countArr = [Int](repeating: 0, count: max - min + 1)
      for num in nums {
        countArr[num-min] += 1
      }
    
      var res = [Int]()
      for i in 0..<countArr.count {
        if countArr[i] == 0 {
          continue
        }
        for _ in 0..<countArr[i] {
          res.append(i+min)
        }
      }
      return res
    }
}
```

* []

```c
int* sortArray(int* nums, int numsSize, int* returnSize) {
    int min = INT_MAX, max = INT_MIN;
    *returnSize = numsSize;
    for (int i = 0; i < numsSize; ++i) {
      min = fmin(min,nums[i]);
      max = fmax(max,nums[i]);
    }
    int n = (max-min+1);
    int *countArr = (int *)malloc(n*sizeof(int));
    memset(countArr,0,n*sizeof(int));
   
    for (int i = 0; i < numsSize; ++i) {
      countArr[nums[i]-min] += 1;
    }

    int *res = (int *)malloc(numsSize*sizeof(int));
    int index = 0;

    for (int i = 0; i < n; ++i) {
      if (countArr[i] == 0) {
        continue;
      }
      for(int j = 0; j < countArr[i]; ++j) {
        res[index] = i+min;
        index += 1;
      }
    }

    free(countArr);
    return res;
}
```

* []

```java
//! 计数排序
class Solution {
    public int[] sortArray(int[] nums) {
      int min = Arrays.stream(nums).min().getAsInt();
      int max = Arrays.stream(nums).max().getAsInt();
      int[] countArr = new int[max - min + 1];

      for(int num:nums) {
        countArr[num-min] += 1;
      }

      int index = 0;

      for (int i = 0; i < countArr.length; ++i) { 
        for (int j = 0; j < countArr[i]; ++j) {
          nums[index] = i+min;
          index += 1;
        }
      }
      return nums;
    }
}
```

#### 10. 基数排序

基数排序(Radix Sort)是桶排序的扩展，它的基本思想是：将整数按位数切割成不同的数字，然后按每个位数分别比较。

![基数排序.png](https://pic.leetcode-cn.com/1649836591-fSHgsS-20190209192446477.png)

在上图中，首先将所有待比较的数值 统一为  相同位数长度，接着从最低位开始，依次进行排序。

按照 **个位数** 进行排序。
按照 **十位数** 进行排序。
按照 **百位数** 进行排序。
... ... ...
... ... ...

按照这个模式 **一路排序** 后，那么最终数列就变成了一个有序序列。

具体代码如下：

* []

```swift
class Solution {
    func sortArray(_ nums: [Int]) -> [Int] {
      //! 非负数
      var naturalArray = [Int]()
      //! 负数
      var negativeArray = [Int]()
      for num in nums {
        if num >= 0 {
          naturalArray.append(num)
        } else {
          negativeArray.append(-num)
        }
      }
    
      //! 先处理非负数
      let maxValue1 = naturalArray.max() ?? 0
      //! 从 个位开始，对数组按照 `指数` 进行排序
      var exp1 = 1
      while maxValue1/exp1 > 0 {
        countingSort(&naturalArray,exp1)
        exp1 *= 10
      }
    
      //! 同理处理负数
      let maxValue2 = negativeArray.max() ?? 0
      var exp2 = 1
      while maxValue2/exp2 > 0 {
        countingSort(&negativeArray,exp2)
        exp2 *= 10
      }
      var res = [Int]()
      for num in negativeArray.reversed() {
        res.append(-num)
      }
      return res + naturalArray
    }
    /**
      * 计数排序-对数组按照"某个 位数"进行排序
      *
      * @param nums
      * @param exp 指数
      */
  
    func countingSort(_ nums: inout [Int], _ exp:Int) {
      if nums.count <= 1 {
        return
      }
    
      //! 计算每一个元素的个数
      var count = [Int](repeating: 0, count: 10)
      for i in 0..<nums.count {
        let index = (nums[i]/exp)%10
        count[index] += 1
      }
    
      //! 计算排序后的位置
      for i in 1..<count.count {
        count[i] += count[i-1]
      }
    
      // 临时数组temp，存储排序之后的结果
      var temp = [Int](repeating: 0, count: nums.count)
      for i in (0..<nums.count).reversed() {
        let index = (nums[i]/exp)%10
        temp[count[index]-1] = nums[i]
        count[index] -= 1
      }
    
      for i in 0..<nums.count {
        nums[i] = temp[i]
      }
    }
}
```

