#### 方法一：逐位判断

- 根据 **与运算** 定义，设二进制数字 $n$ ，则有：
  - 若 $n \& 1 = 0$ ，则 $n$ 二进制 **最右一位** 为 $0$ ；
  - 若 $n \& 1 = 1$ ，则 $n$ 二进制 **最右一位** 为 $1$ 。
- 根据以上特点，考虑以下 **循环判断** ：
  1. 判断 $n$ 最右一位是否为 $1$ ，根据结果计数。
  2. 将 $n$ 右移一位（本题要求把数字 $n$ 看作无符号数，因此使用 **无符号右移** 操作）。

##### 算法流程：

1. 初始化数量统计变量 $res = 0$ 。
2. 循环逐位判断： 当 $n = 0$ 时跳出。
   1. **`res += n & 1` ：** 若 $n \& 1 = 1$ ，则统计数 $res$ 加一。
   2. **`n >>= 1` ：** 将二进制数字 $n$ 无符号右移一位（ Java 中无符号右移为 "$>>>$" ） 。
3. 返回统计数量 $res$ 。

<![Picture1.png](https://pic.leetcode-cn.com/448525d584e7a22b2753d554617c410096982d484220682cd64e81eff3b607f2-Picture1.png),![Picture2.png](https://pic.leetcode-cn.com/85c2221b5b9321ae3429947732e12e8f5910ceca0002198b37d640b77399e41a-Picture2.png),![Picture3.png](https://pic.leetcode-cn.com/68e7b94272835e52ea43d74829ca664383751823247c321809d8a6d91e9eba0c-Picture3.png),![Picture4.png](https://pic.leetcode-cn.com/86b2d309acaf7a489ae66e5959b2fbb207916e68bd0dddaae4e33746b7cd6a9d-Picture4.png),![Picture5.png](https://pic.leetcode-cn.com/acedbebcbb1776594aaa3aa7e25d993341b41b4c145cca7b64e0e381a62faa82-Picture5.png),![Picture6.png](https://pic.leetcode-cn.com/7db73985a552da1806c5f5d8f1707fd5a48ff0a684941699124525e4cdaac5e2-Picture6.png),![Picture7.png](https://pic.leetcode-cn.com/9c19a89349ed0cffd64109292bdcd3fe84c240360c0b6b365d7d8843f6463440-Picture7.png),![Picture8.png](https://pic.leetcode-cn.com/85e342935f618d8ca0a9af4cce6ba4cbbdd55e067ebfff4e8deb8aae70b36e4b-Picture8.png),![Picture9.png](https://pic.leetcode-cn.com/6ca5a5f0452cce23a2a3b4a1e92d79d74c9728a246d4fccbb90e1d759860bcfc-Picture9.png)>

##### 复杂度分析：

- **时间复杂度 $O(log_2 n)$ ：** 此算法循环内部仅有 **移位、与、加** 等基本运算，占用 $O(1)$ ；逐位判断需循环 $log_2 n$ 次，其中 $log_2 n$ 代表数字 $n$ 最高位 $1$ 的所在位数（例如 $log_2 4 = 2$, $log_2 16 = 4$）。
- **空间复杂度 $O(1)$ ：** 变量 $res$ 使用常数大小额外空间。

#### 代码：

* []

```python
class Solution:
    def hammingWeight(self, n: int) -> int:
        res = 0
        while n:
            res += n & 1
            n >>= 1
        return res
```

* []

```java
public class Solution {
    public int hammingWeight(int n) {
        int res = 0;
        while(n != 0) {
            res += n & 1;
            n >>>= 1;
        }
        return res;
    }
}
```

#### 方法二：巧用 $n \& (n - 1)$

- **$(n - 1)$ 解析：** 二进制数字 $n$ 最右边的 $1$ 变成 $0$ ，此 $1$ 右边的 $0$ 都变成 $1$ 。
- **$n \& (n - 1)$ 解析：** 二进制数字 $n$ 最右边的 $1$ 变成 $0$ ，其余不变。

![Picture10.png](https://pic.leetcode-cn.com/9bc8ab7ba242888d5291770d35ef749ae76ee2f1a51d31d729324755fc4b1b1c-Picture10.png)

##### 算法流程：

1. 初始化数量统计变量 $res$ 。
2. 循环消去最右边的 $1$ ：当 $n = 0$ 时跳出。
   1. **`res += 1` ：** 统计变量加 $1$ ；
   2. **`n &= n - 1` ：** 消去数字 $n$ 最右边的 $1$ 。
3. 返回统计数量 $res$ 。

<![Picture11.png](https://pic.leetcode-cn.com/45b120bce8248a3d573c3d357a99cff589dd511b1c86ce88d2d4b4554ee0f25f-Picture11.png),![Picture12.png](https://pic.leetcode-cn.com/5a1ee9ab9e12156294f3324bc8e5a454e22794f0994020e42f4513c6ca331ed9-Picture12.png),![Picture13.png](https://pic.leetcode-cn.com/72cb7482dca02d6364a26016a92451442a21adf7b43db1d2702616aff5857405-Picture13.png),![Picture14.png](https://pic.leetcode-cn.com/62e1ea0cce964e06ec99da89bd4e312472b7f561ee592ece70240059efd8dca7-Picture14.png)>

##### 复杂度分析：

- **时间复杂度 $O(M)$ ：** $n \& (n - 1)$ 操作仅有减法和与运算，占用 $O(1)$ ；设 $M$ 为二进制数字 $n$ 中 $1$ 的个数，则需循环 $M$ 次（每轮消去一个 $1$ ），占用 $O(M)$ 。
- **空间复杂度 $O(1)$ ：** 变量 $res$ 使用常数大小额外空间。

#### 代码：

* []

```python
class Solution:
    def hammingWeight(self, n: int) -> int:
        res = 0
        while n:
            res += 1
            n &= n - 1
        return res
```

* []

```java
public class Solution {
    public int hammingWeight(int n) {
        int res = 0;
        while(n != 0) {
            res++;
            n &= n - 1;
        }
        return res;
    }
}
```

